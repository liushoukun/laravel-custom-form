<?php


namespace Dawn\CustomForm\Inputs;


use Dawn\Labels\Facades\Labels;

trait Options
{

    protected $options;

    /**
     * @return mixed
     */
    public function getOptions()
    {
        return $this->options;
    }

    public function setOptions($options)
    {
        $data          = [
            'data' => $options, // todo 校验
            'type' => 'local',
        ];
        $this->options = $data;
        return $this;
    }

    /**
     * 设置远程获取
     * @param string $url
     * @return $this
     */
    public function setOptionLoad(string $url)
    {
        $data          = [
            'data' => null,
            'type' => 'remote',
            'url'  => $url,// 远程
        ];
        $this->options = $data;
        return $this;

    }


//    public static function resolve(array $data = [])
//    {
//        $field = parent::resolve($data);
//        $field->setOptions($data['options'] ?? null);
//        return $field;
//    }


    public function variables() : array
    {
        $data = [
            'optional' => $this->options
        ];
        return array_merge(parent::variables(), $data);
    }

    public function showLabel() : array
    {
        $data = parent::showLabel(); // TODO: Change the autogenerated stub
        $this->options;
        if ($this->options['type'] === 'local') {
            $options = $this->options['data'] ?? [];
            $options = collect($options)->pluck('label', 'value');

            if ($this->multiple === true) {

                $value = [];
                foreach ($this->value as $item) {
                    $value[] = $options[$item] ?? '';
                }
                $value = implode($value, ',');
            } else {
                $value = $options[$this->value] ?? '';
            }
        } else {
            $value = $this->value;
        }

        $data['value'] = $value;
        $data['type']  = 'text';
        $data['copy']  = false;
        return (Labels::resolve($data))->toArray();
    }

}
